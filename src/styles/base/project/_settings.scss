/**
 * Grid
 */

$breakpoints: (
	extra-small: (
		min: 0,
		max: 374px
	),
	small: (
		min: 0,
		outer-gutter: 20px,
		column-gutter: 20px,
		gutter: 30px
	),
	medium: (
		width: 768px,
		outer-gutter: 20px,
		column-gutter: 20px,
		gutter: 30px
	),
	large: (
		width: 960px,
		outer-gutter: 20px,
		column-gutter: 40px,
		gutter: 30px
	),
	extra-large: (
		width: 1200px
	),
	extra-extra-large: (
		width: 1500px,
		max: 9999px
	)
);

$breakpoint_default: large;

$breakpoint_names: map-keys($breakpoints);

@each $name, $data in $breakpoints {

	$index: index($breakpoint_names, $name);
	$first: $index == 1;
	$last: $index == length($breakpoint_names);

	$prev: if(not $first, map-get($breakpoints, nth($breakpoint_names, $index - 1)), false);
	$next: if(not $last, map-get($breakpoints, nth($breakpoint_names, $index + 1)), false);

	@if not map-has-key($data, min) {
		$min: if(not $first, map-get($data, width), 0);
		$data: map-merge($data, (min: $min));
	}

	@if not map-has-key($data, max) {
		$max: if(not $last, map-get($next, width) - 1, 9999px);
		$data: map-merge($data, (max: $max));
	}

	$breakpoints: map-merge($breakpoints, ($name: $data)) !global;
}

@function b($name, $dir: up) {
	@if not map-has-key($breakpoints, $name) {
		@warn "Breakpoint `#{$name}` not found.";
		@return "";
	}

	$bp: map-get($breakpoints, $name);
	$min: map-get($bp, min);
	$max: map-get($bp, max);
	$screen: "only screen";

	@if $dir == up {
		@if $min == 0 {
			@return "#{$screen}";
		}

		@return "#{$screen} and (min-width: #{$min})";
	}

	@if $dir == down {
		@return "#{$screen} and (max-width: #{$max})";
	}

	@return "#{$screen} and (min-width: #{$min}) and (max-width: #{$max})";
}
@function breakpoint($name, $dir: up) { @return b($name, $dir); }

@function bpdata($name, $key) {
	@if not map-has-key($breakpoints, $name) {
		@warn "Breakpoint `#{$name}` not found.";
		@return false;
	}

	$bp: map-get($breakpoints, $name);

	@if not map-has-key($bp, $key) {
		@warn "`#{$key}` not set for `#{$name}`";
		@return false;
	}

	@return map-get($bp, $key);
}
@function breakpoint-data($name, $key) { @return bpdata($name, $key); }

@function og($name) {
	@return bpdata($name, outer-gutter);
}
@function outer-gutter($name) { @return cg($name); }

@function cg($name) {
	@return bpdata($name, column-gutter);
}
@function column-gutter($name) { @return cg($name); }

$column-gutter: cg($breakpoint_default);
$outer-gutter: og($breakpoint_default);

@function g($ratios: 1, $name: $breakpoint_default) {
	$gutter: bpdata($name, gutter);

	$value: "";
	@each $ratio in $ratios {
		$g: $gutter * $ratio;
		@if $value {
			$value: "#{$value} #{$g}";
		}
		@else {
			$value: $g;
		}

	}

	@return unquote($value);
}
@function gutter($ratios: 1, $name: $breakpoint_default) { @return g($ratios, $name); }

@mixin g($props, $ratios: 1, $name: $breakpoint_default) {
	@each $prop in $props {
		#{$prop}: g($ratios, $name);
	}
}
@mixin gutter($props, $ratios: 1, $name: $breakpoint_default) { @return g($props, $ratios, $name); }

@mixin rg($props, $ratios: 1) {
	@each $name, $data in $breakpoints {
		@if map-has-key($data, gutter) {
			@if map-get($data, min) == 0 {
				@each $prop in $props {
					#{$prop}: g($ratios, $name);
				}
			}
			@else {
				@media #{b($name,up)} {
					@each $prop in $props {
						#{$prop}: g($ratios, $name);
					}
				}
			}
		}
	}
}
@function responsive-gutter($props, $ratios: 1) { @return rg($props, $ratios); }

$content-width: 1000px;
$container-width: 1000px;
$row-width: $container-width + ($outer-gutter * 2);

$susy: (
	gutter-position: inside,
	columns: 12,
	gutters: 0,
	container: $row-width,
	global-box-sizing: border-box
);

$extra-small-only: b(extra-small, only);
$small-up: b(small, up);
$small-only: b(small, only);
$medium-up: b(medium, up);
$medium-down: b(medium, down);
$medium-only: b(medium, only);
$large-up: b(large, up);
$large-only: b(large, only);
$extra-large-up: b(extra-large, up);
$extra-large-only: b(extra-large, only);


/**
 * Colours
 */

$color-primary: $color-white;
$color-secondary: $color-black;

$body-bg-color: $color-white;
$body-color: $color-black;


/**
 * Typography
 */

$font-family-body: $system-fonts, sans-serif;
$font-family-heading: #{$font-family-body};


/**
 * Layout
 */


/**
 * Animation
 */

$global-ease: cubic-bezier(0.455, 0.03, 0.515, 0.955);
$ease-bounce: cubic-bezier(0.5, 0.000, 0.000, 1.5);


/**
 * Misc
 */

$global-radius: 3px;


/**
 * Utilities
 */

$empty: "\0020";
$bullet: "\2022";
$cross: "\2715";
$arrow-right: "\02192";
$arrow-left: "\02190";
